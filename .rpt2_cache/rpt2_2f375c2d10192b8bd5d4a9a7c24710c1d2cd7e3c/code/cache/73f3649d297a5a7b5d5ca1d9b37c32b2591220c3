{
  "code": "export default class toolkit {\r\n    static makeRow(value = 0) {\r\n        const array = new Array(9);\r\n        array.fill(value);\r\n        return array;\r\n    }\r\n    static makeMatrix(value = 0) {\r\n        return Array.from({ length: 9 }, () => this.makeRow(value));\r\n    }\r\n    static shuffle(array) {\r\n        const endIndex = array.length - 2;\r\n        for (let i = 0, length = array.length; i < endIndex; i++) {\r\n            const j = Math.floor(Math.random() * (length - i));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    }\r\n    static checkFillable(martix, n, rowIndex, colIndex) {\r\n        const row = martix[rowIndex];\r\n        const column = toolkit.makeRow().map((v, i) => martix[i][colIndex]);\r\n        const { boxIndex } = toolkit.convertToBoxIndex(rowIndex, colIndex);\r\n        const box = toolkit.getBoxCells(martix, boxIndex);\r\n        for (let i = 0; i < 9; i++) {\r\n            if (row[i] === n || column[i] === n || box[i] === n) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static convertToBoxIndex(rowIndex, colIndex) {\r\n        return {\r\n            boxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n            cellIndex: rowIndex % 3 * 3 + colIndex % 3\r\n        };\r\n    }\r\n    static convertFromBoxIndex(boxIndex, cellIndex) {\r\n        return {\r\n            rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n            colIndex: boxIndex % 3 * 3 + cellIndex % 3\r\n        };\r\n    }\r\n    static getBoxCells(martix, boxIndex) {\r\n        const startRowIndex = Math.floor(boxIndex / 3) * 3;\r\n        const startColIndex = boxIndex % 3 * 3;\r\n        const result = [];\r\n        for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n            const rowIndex = startRowIndex + Math.floor(cellIndex / 3);\r\n            const colIndex = startColIndex + cellIndex % 3;\r\n            result.push(martix[rowIndex][colIndex]);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
  "references": []
}
